#+STARTUP: overview

* Table of contents :TOC_3:
- [[#how-to-use][How to use]]
  - [[#tangle][Tangle.]]
  - [[#make-sure-relevant-files-are-checking-into-version-control][Make sure relevant files are checking into version control]]
  - [[#apply-the-config-with-dry-activate--test--switch][Apply the config with ~dry-activate~ / ~test~ / ~switch~.]]
- [[#root-config][Root config]]
  - [[#utility-functions][Utility functions]]
- [[#emacs][Emacs]]
- [[#desktop-environment][Desktop environment]]
- [[#networking][Networking]]
  -  [[#managing-networkmanager-connections-delete-connections-see-passwords][Managing =NetworkManager= connections (delete connections, see passwords)]]
- [[#localizationkeymaptimezone][Localization/keymap/timezone]]
- [[#other-packages][Other packages]]
  - [[#vim][Vim]]
  - [[#teamviewer][Teamviewer]]
- [[#machine-specific-configuration][Machine specific configuration]]
    - [[#high-res-screen][High-res screen]]
    - [[#screen-brightness][Screen brightness]]
    - [[#sound][Sound]]
    - [[#touchpad][Touchpad]]
    - [[#boot][Boot]]
    - [[#result-of-nixos-generate-config][Result of ~nixos-generate-config~.]]
- [[#misc][Misc]]
  - [[#use-x-server][Use X server:]]
  - [[#ssh][SSH]]
  - [[#state-version][State version]]
- [[#mathematica][Mathematica]]
- [[#global-todos][Global TODOS]]
  - [[#should-i3-be-configured-in-nix-instead-of-in-a-separate-config-file][Should =i3= be configured in nix instead of in a separate config file?]]
  - [[#setup-home-folder-syncing-with-mega][Setup home folder syncing with Mega]]
  - [[#sometimes-only-the-first-time-when-opening-a-hyperlink-in-emacs-they-are-opened-as-two-tabs-in-ff--one-tab-in-chrome][Sometimes (only the first time?) when opening a hyperlink in emacs they are opened as two tabs in FF + one tab in Chrome.]]
  - [[#pomodoro-timer-in-emacs][Pomodoro timer in emacs]]
  - [[#latexpreview-sometimes-fails][Latexpreview sometimes fails]]
  - [[#make-ditaa-code-blocks-work-with-org-babel][Make =ditaa= code blocks work with =org-babel=.]]
  - [[#proj-c-move-all-of-the-contents-of-doom-emacs-into-the-literate-config][PROJ [#C] Move all of the contents of ./doom-emacs/ into the literate config.]]
  - [[#proj-c-move-all-of-the-contents-of-emma-into-the-literate-config][PROJ [#C] Move all of the contents of ./emma/ into the literate config.]]

* How to use

** Tangle.
#+begin_src elisp :noweb yes
(org-babel-tangle)
#+end_src

#+RESULTS:
| flake.nix |

** Make sure relevant files are checking into version control

When running a nix flake unstaged files are ignored (see[[https://github.com/NixOS/nix/pull/6858][ this issue]]) which can result in some confusing error messages about files not existing. Make sure all the relevant files are (temporarily) staged.

** Apply the config with ~dry-activate~ / ~test~ / ~switch~.

~nixos-rebuild <dry-activate | test | switch> --flake .~

* Root config

This config is =flake.nix= compatible which is the root of the config.
Credit to https://youtu.be/watch?v=mJbQ--iBc1U for helping me migrate my original config to =flake.nix=

#+begin_src nix :noweb yes :tangle flake.nix
{
  description = "emmabastas system configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-22.05";
    home-manager = {
      url = "github:nix-community/home-manager/release-22.05";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    <<inputs-emacs>>
  };

  outputs = { self, nixpkgs, home-manager, nix-doom-emacs, ... }:
  let
    system = "x86_64-linux";

    pkgs = import nixpkgs {
      inherit system;
      config = { allowUnfree = true; };
    };

    lib = nixpkgs.lib;

    utils = (import ./utils.nix) lib;

  in {
    nixosConfigurations = {
      nixos = lib.nixosSystem {
        inherit system;

        modules = [
          home-manager.nixosModules.home-manager {
            home-manager = {
              useGlobalPkgs = true;
              useUserPackages = true;
              users.emma = lib.mkMerge [
                nix-doom-emacs.hmModule
                ({ pkgs, ... }: utils.recursiveMerge [
                  ((import ./emma) { pkgs = pkgs; })
                  <<users-emma-emacs-1>>
                  <<users-emma-emacs-2>>
                ])
              ];
            };
          }
          ({ config, pkgs, ... }: (utils.recursiveMerge [
            {
              imports = [ utils.hardwareConfig ];

              users.users.emma = {
                isNormalUser = true;
                extraGroups = [ "wheel" ];
              };
            }
            <<system-wide-boot>>
            <<system-wide-networking-1>>
            <<system-wide-networking-2>>
            <<system-wide-localization>>
            <<system-wide-machine-specific>>
            <<system-wide-high-res-1>>
            <<system-wide-high-res-2>>
            <<system-wide-desktop-environment>>
            <<system-wide-vim>>
            <<system-wide-brightnessctl>>
            <<system-wide-mathematica>>
            <<system-wide-teamviewer>>
            <<system-wide-sound>>
            <<system-wide-touchpad>>
            <<system-wide-misc-x-server>>
            <<system-wide-misc-ssh>>
            <<system-wide-misc-allow-unfree>>
            <<system-wide-misc-state-version>>
          ]))
        ];
      };
    };
  };
}
#+end_src

** Utility functions

#+name: utility-functions
#+begin_src nix :noweb yes :tangle utils.nix
lib: {
  allSame = with lib; values:
    if tail values == []
      then true
    else if head values == head (tail values)
      then allSame (tail values)
    else false;

  join = with lib; sep: values:
    if values == []
      then ""
    else if tail values == []
      then head values
    else "${head values}${sep}${join sep (tail values)}";

  # based off https://stackoverflow.com/a/54505212
  recursiveMerge = with lib; attrList:
    let f = attrPath:
      zipAttrsWith (n: values:
        if tail values == []
          then head values
        else if all isList values
          then unique (concatLists values)
        else if all isAttrs values
          then f (attrPath ++ [n]) values
        else if allSame values
          then head values
        else abort "Values in ${join "." attrPath} can't be merged."
      );
    in f [] attrList;

  hardwareConfig = (
    <<nixos-generate-config()>>
  );
}
#+end_src

* Emacs
We're using =Doom-Emacs=:

#+name: inputs-emacs
#+begin_src nix
nix-doom-emacs.url = "github:nix-community/nix-doom-emacs";
#+end_src

Most of the configuration for Emacs is outside this document in[[ ./doom-emacs/]]:

#+name: users-emma-emacs-1
#+begin_src nix
{
  programs.doom-emacs = {
    enable = true;
    doomPrivateDir = ./doom-emacs;
    extraPackages = [
      pkgs.graphviz #Used by org-roam to render notes as a graph
    ];
    extraConfig = ''
                (setq org-roam-graph-executable "${pkgs.graphviz.out}/bin/dot")
    '';
  };
}
#+end_src

Lastly we run the server upon login in:

#+name: users-emma-emacs-2
#+begin_src nix
{
  services.emacs = {
    enable = true;
  };
}
#+end_src

,#+begin_src nix
#+end_src

* Desktop environment

Use =i3= as the window manager:

#+name: system-wide-desktop-environment
#+begin_src nix
{
  services.xserver = {
    desktopManager.xterm.enable = false;

    displayManager = {
      defaultSession = "none+i3";
    };

    windowManager.i3 = {
      enable = true;
    };
  };
}
#+end_src

* Networking

We're using =wpa_supplican + NetworkManager=.

#+name: system-wide-networking-1
#+begin_src nix
{
  networking.networkmanager.enable = true;

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.enp3s0.useDHCP = true;
  networking.interfaces.wlp2s0.useDHCP = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;
}
#+end_src

We also want to use =NetworkManager= witout ~sudo~:

#+name: system-wide-networking-2
#+begin_src nix
{
  users.users.emma.extraGroups = [ "networkmanager" ];
}
#+end_src

**  Managing =NetworkManager= connections (delete connections, see passwords)

Connections are stored in [[/etc/NetworkManager/system-connections/]] (requires ~sudo~).

* Localization/keymap/timezone

#+name: system-wide-localization
#+begin_src nix
{
  i18n.defaultLocale = "en_US.UTF-8";
  console.keyMap = "sv-latin1";
  services.xserver.layout = "se";
  time.timeZone = "Europe/Stockholm";
}
#+end_src

* Other packages

** Vim

#+name: system-wide-vim
#+begin_src nix
{
  environment.systemPackages = [ pkgs.vim ];
}
#+end_src

** Teamviewer

We sometimes want to use Teamviewer to help friends and family with IT. Teamviewer /feels/ like a major security issue though, so we leave it commented out here and only uncomment for those brief moments where we need it.

#+name: system-wide-teamviewer
#+begin_src nix
{
  #nixpkgs.config.allowUnfree = true;
  #services.teamviewer.enable = true;
}
#+end_src

We could proably find a better way to disable teamviewer by default, but this is 80/20.

* Machine specific configuration

I'm currently running my config on a single machine, so no need to split up this part of the config depending on machine yet.

#+name: system-wide-machine-specific
#+begin_src nix
{
  networking.hostName = "nixos";
}
#+end_src

*** High-res screen

The TTY font is very small on a high-res screen, we use a large Terminus font to remedy this.
~earlySetup = true~ applies the bigger font earlier in the startup process.

#+name: system-wide-high-res-1
#+begin_src nix
{
  console = {
    earlySetup = true;
    font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
    packages = with pkgs; [ terminus_font ];
  };
}
#+end_src

These settings appear to produce as tear-free setup.
~dpi = 220~ is the most important setting here, it makes things scale better for a high-res screen.

#+name: system-wide-high-res-2
#+begin_src nix
{
  services.xserver = {
    videoDrivers = [ "modesetting" ];
    useGlamor = true;
    dpi = 220;
  };
}
#+end_src

If we where to experience graphics isses these settings could help, the perf would drop though.

#+begin_src nix
{
  services.xserver = {
    videoDrivers = [ "intel" ];
    deviceSection = ''
      Option "DRI" "2"
      Option "TearFree" "true"
    '';
  };
}
#+end_src

*** Screen brightness

Our machine has brightness function keys that aren't configured by default, so we do it manually.

We use =brightnessctl= to set brightness:

#+name: system-wide-brightnessctl
#+begin_src nix
{
  environment.systemPackages = [ pkgs.brightnessctl ];
}
#+end_src

**** TODO configure i3 in this section instead of in [[*User emma][User emma]]
#And then bind the brightness keys to it in =i3=:
#
##+begin_src conf :tangle i3.conf
#bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl s +10%
#bindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl s 10%-
##+end_src

*** Sound
#+name: system-wide-sound
#+begin_src nix
{
  sound.enable = true;
  hardware.pulseaudio.enable = true;
}
#+end_src

**** TODO configure i3 in this section instead of in [[*User emma][User emma]]
#Our machine has volume functions keys that aren't configured by default, so we do it manually.
#
##+begin_src conf :tangle i3.conf
#set $refresh_i3status killall -SIGUSR1 i3status
#bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
#bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
#bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
#bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
##+end_src

*** Touchpad
#+name: system-wide-touchpad
#+begin_src nix
{
  services.xserver.libinput.enable = true;
}
#+end_src

*** Boot
#+name: system-wide-boot
#+begin_src nix
{
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
}
#+end_src

*** Result of ~nixos-generate-config~.
~nixos-generate-config~ looks at our hardware and gives us some nice config for it

#+name: nixos-generate-config
#+begin_src shell :results output replace
nixos-generate-config --show-hardware-config 2>&1
#+end_src

#+RESULTS:
#+begin_example
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/a4ef7ef0-7ea6-46e4-8a5f-ec9cf5fe8f24";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/BFEA-950B";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/04019ade-d0d4-40ff-a6f9-bf567ae3fce9"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  # high-resolution display
  hardware.video.hidpi.enable = lib.mkDefault true;
}
#+end_example

* Misc
** Use X server:

#+name: system-wide-misc-x-server
#+begin_src nix
{
  services.xserver = {
    enable = true;
    autorun = true;
  };
}
#+end_src


** SSH

#+name: system-wide-misc-ssh
#+begin_src nix
{
  services.openssh.enable = true;
}
#+end_src

** State version
#+name: system-wide-misc-state-version
#+begin_src nix
{
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "21.11"; # Did you read the comment?
}
#+end_src

* Mathematica
Mathematica is proprietary software, and the nix package requires ~Mathematica_13.0.1_BNDL_LINUX.sh~ to already be a part of the store.
The file can be downoaded by going to [[https://account.wolfram.com/products]] ~> User Portal~ and doing a =Drect File Download=.

Then add the downloaded file to the store with ~nix-store --add-fixed sha256 Mathematica_13.0.1_BNDL_LINUX.sh~.

Check if the file in in the store with ~ls /nix/store/ | grep Mathematica~.

After that we can install the nix package:

#+name: system-wide-mathematica
#+begin_src nix
{
  nixpkgs.config.allowUnfree = true;
  environment.systemPackages = [ pkgs.mathematica ];
}
#+end_src


* Global TODOS
** TODO [#B] Should =i3= be configured in nix instead of in a separate config file?
Relevant sections:
    - [[Screen brightness]]
    - [[Sound]]

** TODO [#A] Setup home folder syncing with Mega
** TODO [#C] Sometimes (only the first time?) when opening a hyperlink in emacs they are opened as two tabs in FF + one tab in Chrome.
    is ~org-file-apps~ the relevant variable?

** TODO [#C] Pomodoro timer in emacs
** [[file:~/org/flashcards.org::*Latexpreview sometimes fails][Latexpreview sometimes fails]]
** TODO [#C] Make =ditaa= code blocks work with =org-babel=.
** PROJ [#C] Move all of the contents of[[file:doom-emacs/][ ./doom-emacs/]] into the literate config.
** PROJ [#C] Move all of the contents of [[file:emma/][./emma/]] into the literate config.
