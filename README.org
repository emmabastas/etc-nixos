#+STARTUP: overview

* Table of contents :TOC_3:
- [[#how-to-use][How to use]]
  - [[#tangle][Tangle.]]
  - [[#make-sure-relevant-files-are-checking-into-version-control][Make sure relevant files are checking into version control]]
  - [[#apply-the-config-with-dry-activate--test--switch][Apply the config with ~dry-activate~ / ~test~ / ~switch~.]]
- [[#nix-environment-for-this-config][Nix environment for this config]]
- [[#root-config][Root config]]
  - [[#utility-functions][Utility functions]]
- [[#user-emma][user ~emma~]]
  - [[#enable-nixos-flakes][Enable nixos flakes]]
    - [[#is-this-really-the-right-place-for-this][is this really the right place for this?]]
  - [[#i3-config][I3 config]]
    - [[#dissribute-i3-conf-to-other-sections-where-it-makes-sense-to-have-it][dissribute i3 conf to other sections where it makes sense to have it]]
  - [[#basic-terminal-and-shell][Basic terminal and shell]]
  - [[#ssh][ssh]]
  - [[#git][git]]
  - [[#emacs][Emacs]]
    - [[#moving-around][Moving around]]
    - [[#relative-line-numbering][Relative line numbering]]
    - [[#insert-emojis-and-unicode][Insert emojis and unicode]]
    - [[#custom-unicodeemoji-insertion][Custom unicode/emoji insertion]]
    - [[#spell-checking-not-active-wasnt-configured-successfully][Spell checking (Not active, wasn't configured successfully)]]
    - [[#general-org-mode][General =org-mode=]]
    - [[#zettelkasten-method-with-org-roam-v2][Zettelkasten-method with =org-roam v2=.]]
    - [[#read-pdfs-and-epubs-with-pdftools-novel-and-anotate-them-with-noter][Read pdf's and epub's with =pdftools=, =nov.el= and anotate them with =noter=]]
    - [[#terminal-emulator][Terminal emulator]]
    - [[#python-language-server][Python language server]]
  - [[#direnv][direnv]]
    - [[#move-emacs-for-direnv-config-here][Move emacs for direnv config here]]
  - [[#misc-programs-specific-to-emma][Misc programs specific to emma]]
    - [[#firefox][firefox]]
    - [[#gimp][Gimp]]
    - [[#feh][Feh]]
    - [[#tldr][Tldr]]
    - [[#zip-and-unzip][zip and unzip]]
    - [[#spectre-cli][spectre-cli]]
    - [[#customized-vim][customized vim]]
  - [[#globally-installed-programming-language][Globally installed programming language]]
  - [[#flashcards-setup][Flashcards setup]]
    - [[#org-drill][=org-drill=]]
    - [[#webwork-flashcard][=webwork-flashcard=]]
  - [[#backups-with-meganz][Backups with mega.nz]]
- [[#user-foo][user ~foo~]]
  - [[#spectre][Spectre]]
  - [[#git-1][Git]]
  - [[#mullvad-browser][Mullvad browser]]
- [[#desktop-environment][Desktop environment]]
- [[#networking][Networking]]
  -  [[#managing-networkmanager-connections-delete-connections-see-passwords][Managing =NetworkManager= connections (delete connections, see passwords)]]
  - [[#vpn][VPN]]
- [[#localizationkeymaptimezone][Localization/keymap/timezone]]
- [[#other-packages][Other packages]]
  - [[#vim][Vim]]
  - [[#teamviewer][Teamviewer]]
  - [[#mathematica][Mathematica]]
- [[#machine-specific-configuration][Machine specific configuration]]
    - [[#high-res-screen][High-res screen]]
    - [[#screen-brightness][Screen brightness]]
    - [[#sound][Sound]]
    - [[#touchpad][Touchpad]]
    - [[#boot][Boot]]
    - [[#result-of-nixos-generate-config][Result of ~nixos-generate-config~.]]
- [[#misc][Misc]]
  - [[#use-x-server][Use X server:]]
  - [[#ssh-1][SSH]]
  - [[#state-version][State version]]
- [[#global-todos][Global TODOS]]
  - [[#find-a-relliable-way-to-override-default-doom-settings-for-packages][Find a relliable way to override default doom settings for packages]]
  - [[#should-i3-be-configured-in-nix-instead-of-in-a-separate-config-file][Should =i3= be configured in nix instead of in a separate config file?]]
  - [[#setup-home-folder-syncing-with-mega][Setup home folder syncing with Mega]]
  - [[#add-tons-of-math-related-unicode-to-emojify][Add tons of math-related unicode to emojify]]
  - [[#c--style-shortcut-for-inserting-emojis][~C-*~ style shortcut for inserting emojis]]
  - [[#sometimes-only-the-first-time-when-opening-a-hyperlink-in-emacs-they-are-opened-as-two-tabs-in-ff--one-tab-in-chrome][Sometimes (only the first time?) when opening a hyperlink in emacs they are opened as two tabs in FF + one tab in Chrome.]]
  - [[#pomodoro-timer-in-emacs][Pomodoro timer in emacs]]
  - [[#move-doom-emacsinitel-into-the-literate-config][Move ~./doom-emacs/init.el~ into the literate config.]]
  - [[#proj-c-move-all-of-the-contents-of-emma-into-the-literate-config][PROJ [#C] Move all of the contents of ./emma/ into the literate config.]]
  - [[#configure-doom-emacs-so-that-everything-doesnt-have-to-be-rebuilt-everytime][Configure doom-emacs so that everything doesn't have to be rebuilt everytime]]

* How to use

** Tangle.
#+begin_src elisp :noweb yes
(org-babel-tangle)
#+end_src

#+RESULTS:
| ./doom-emacs/packages.el | ./doom-emacs/config.el | utils.nix | flake.nix | ./.envrc | ./dev-flake/flake.nix |

** Make sure relevant files are checking into version control

When running a nix flake unstaged files are ignored (see[[https://github.com/NixOS/nix/pull/6858][ this issue]]) which can result in some confusing error messages about files not existing. Make sure all the relevant files are (temporarily) staged.

** Apply the config with ~dry-activate~ / ~test~ / ~switch~.

~nixos-rebuild <dry-activate | test | switch> --flake .~

* Nix environment for this config
To tangle this config and interactively run some of the non shell and elsip code-blocks we want to setup a nix environment.

We use a nix flake for the environment. If we depend on some program to run code blocks in this config the dependencies can be added here.

#+begin_src nix :noweb yes :tangle ./dev-flake/flake.nix
{
  description = "Flake to use when working on the literate config";

  inputs.flake-utils.url = "github:numtide/flake-utils";

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem
      (system:
        let pkgs = nixpkgs.legacyPackages.${system}; in
        {
          devShells.default = pkgs.mkShell {
            packages = [
            ];
          };
        }
      );
}
#+end_src

and also enable direv:

#+begin_src envrc :tangle ./.envrc
use flake ./dev-flake
#+end_src

Direnv expects the flake to be named ~flake.nix~ which conflicts with the name of our system configuration flake. Hence putting this flake in a subdirectory. We could use a non standard name but it would require us to make some changes in the flake itself annd that's a hassle I won't bother dealing with.

* Root config

This config is =flake.nix= compatible which is the root of the config.
Credit to https://youtu.be/watch?v=mJbQ--iBc1U for helping me migrate my original config to =flake.nix=

#+begin_src nix :noweb yes :tangle flake.nix
{
  description = "emmabastas system configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
    home-manager = {
      url = "github:nix-community/home-manager/release-23.05";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    <<inputs-emacs>>
  };

  outputs = { self, nixpkgs, home-manager, nix-doom-emacs, ... }:
  let
    system = "x86_64-linux";

    pkgs = import nixpkgs {
      inherit system;
      config = { allowUnfree = true; };
    };

    lib = nixpkgs.lib;

    utils = (import ./utils.nix) lib;

  in {
    nixosConfigurations = {
      acomputer = lib.nixosSystem {
        inherit system;

        modules = [
          home-manager.nixosModules.home-manager {
            home-manager = {
              useGlobalPkgs = true;
              useUserPackages = true;
              <<users-emma>>
              <<users-foo>>
            };
          }
          ({ config, pkgs, ... }: (utils.recursiveMerge [
            {
              imports = [ utils.hardwareConfig ];

              users.users.emma = {
                isNormalUser = true;
                extraGroups = [ "wheel" ];
              };

              users.users.foo = {
                isNormalUser = true;
                extraGroups = [ "wheel" ];
              };

              system.stateVersion = <<state-version>>;
            }
            <<system-wide-boot>>
            <<system-wide-networking-1>>
            <<system-wide-networking-2>>
            <<system-wide-networking-vpn>>
            <<system-wide-localization>>
            <<system-wide-machine-specific>>
            <<system-wide-high-res-1>>
            <<system-wide-high-res-2>>
            <<system-wide-desktop-environment>>
            <<system-wide-vim>>
            <<system-wide-brightnessctl>>
            <<system-wide-mathematica>>
            <<system-wide-teamviewer>>
            <<system-wide-sound>>
            <<system-wide-touchpad>>
            <<system-wide-misc-x-server>>
            <<system-wide-misc-ssh>>
            <<system-wide-misc-allow-unfree>>
          ]))
        ];
      };
    };
  };
}
#+end_src

** Utility functions

#+name: utility-functions
#+begin_src nix :noweb yes :tangle utils.nix
lib: {
  allSame = with lib; values:
    if tail values == []
      then true
    else if head values == head (tail values)
      then allSame (tail values)
    else false;

  join = with lib; sep: values:
    if values == []
      then ""
    else if tail values == []
      then head values
    else "${head values}${sep}${join sep (tail values)}";

  # based off https://stackoverflow.com/a/54505212
  recursiveMerge = with lib; attrList:
    let f = attrPath:
      zipAttrsWith (n: values:
        if tail values == []
          then head values
        else if all isList values
          then unique (concatLists values)
        else if all isAttrs values
          then f (attrPath ++ [n]) values
        else if allSame values
          then head values
        else abort "Values in ${join "." attrPath} can't be merged."
      );
    in f [] attrList;

  hardwareConfig = (
    <<hardware-config>>
  );
}
#+end_src

* user ~emma~
Here we can configure programs for the main user account

#+name: users-emma
#+begin_src nix :noweb yes
users.emma =
let
  shellScript = cmd: {
    text = ''
      #!/bin/sh
      ${cmd}
    '';
    executable = true;
  };

  applicationScript = cmd: shellScript ''
    (${cmd} &)
    kill $(expr $PPID - 1)
  '';
in
lib.mkMerge [
  nix-doom-emacs.hmModule
  ({ pkgs, ... }: utils.recursiveMerge [
    {
      home.stateVersion = <<state-version>>;
    }
    <<users-emma-emacs-1>>
    <<users-emma-emacs-2>>
    <<users-emma-emacs-3>>
    <<users-emma-emacs-zettelkasten>>
    <<users-emma-emacs-nov-el>>
    <<users-emma-emacs-python>>
    <<users-emma-mega-cmd>>
    <<users-emma-mullvad>>
    <<users-emma-gimp>>
    <<users-emma-feh>>
    <<users-emma-tldr>>
    <<users-emma-zip-unzip>>
    <<users-emma-webwork-flashcard>>
    <<users-emma-global-pls>>
    <<users-emma-spectre-cli>>
    <<users-emma-firefox>>
    <<users-emma-vim>>
    <<users-emma-direnv>>
    <<users-emma-st>>
    <<users-emma-nerdfonts>>
    <<users-emma-ssh>>
    <<users-emma-bash>>
    <<users-emma-git>>
    <<users-emma-i3>>
    <<users-emma-nix-flakes>>
    {
      programs.doom-emacs = {
        extraConfig = ''
          <<users-emma-emacs-extra-config-zettelkasten>>
          <<users-emma-emacs-extra-config-nov-el>>
        '';
      };
    }
  ])
];
#+end_src

** Enable nixos flakes
We need this to use nix flakes??

#+name: users-emma-nix-flakes
#+begin_src nix
{
  home.file.".config/nix/nix.conf".text = ''experimental-features = nix-command flakes'';
}
#+end_src
*** TODO is this really the right place for this?
** I3 config
#+name: users-emma-i3
#+begin_src nix
{
  home.file.".config/i3/config".source = ./i3.conf;
}
#+end_src
*** TODO dissribute i3 conf to other sections where it makes sense to have it
** Basic terminal and shell

We use our own st package for the terminal

#+name: users-emma-st
#+begin_src nix
{
  home.packages = [ (pkgs.callPackage ./st {}) ];
}
#+end_src

The st package is configured to use =FiraCode=

#+name: users-emma-nerdfonts
#+begin_src nix
{
  home.packages = [ (pkgs.nerdfonts.override { fonts = [ "FiraCode" ]; }) ];
  fonts.fontconfig.enable = true;
}
#+end_src

This is our shell configuration

#+name: users-emma-bash
#+begin_src nix :noweb yes
{
  programs.bash = {
    enable = true;
    bashrcExtra = ''
      export PATH=$HOME/bin:$PATH
      <<users-emma-direnv-bashrc-extra>>
    '';
  };
}
#+end_src

** ssh
#+name: users-emma-ssh
#+begin_src nix
{
  programs.ssh.enable = true;
}
#+end_src
** git
#+name: users-emma-git
#+begin_src nix
{
  programs.git = {
    enable = true;
    userName = "emmabastas";
    userEmail = "emma.bastas@protonmail.com";
    extraConfig = {
      core.editor = "${(pkgs.callPackage ./vim-cli.nix {}).out}/bin/vim";
      init.defaultBranch = "main";
    };
    ignores = [ "*.swp" ];
  };
}
#+end_src
** Emacs
We're using [[https://github.com/doomemacs/doomemacs][doom-emacs]]:

#+name: inputs-emacs
#+begin_src nix
nix-doom-emacs.url = "github:nix-community/nix-doom-emacs";
#+end_src

There are three main ~.el~ files used for configuring doom-emacs:
1) ~config.el~ all "normal" configuration goes here
2) ~init.el~ for enabling doom-emacs module
3) ~packages.el~ for installing packages that aren't part of any doom-emacs module

~config.el~ and ~packages.el~ are tangled from this document whereas ~init.el~ is edited directly. They all end up in ~./doom-emacs/~.


For [[https://github.com/nix-community/nix-doom-emacs/pull/303][caching reasons]] nix-doom-emacs provides two directories for the config files, one for ~config.el~ and one for ~packages.el~. Doom-emacs has to be rebuild everytime ~packages.el~ is changed.
~init.el~ goes in both of these directories (??).

So what happens is we make two derivations containing files in ~./doom-emacs/~ then thell doom-emacs to find the configuration files in these derivations
(This snippet of code is based off: https://github.com/nix-community/nix-doom-emacs/blob/9cbb1c3aa7b957bd2f88215c08c3cb3f55f8e2bb/checks.nix#L46-L64)

#+name: users-emma-emacs-1
#+begin_src nix :noweb yes
{
  programs.doom-emacs = {
    doomPrivateDir = pkgs.linkFarm "doom-config" [
      { name = "config.el"; path = ./doom-emacs/config.el; }
      { name = "init.el";   path = ./doom-emacs/init.el; }
      # Should *not* fail because we're building our straight environment
      # using the doomPackageDir, not the doomPrivateDir.
      {
        name = "packages.el";
        path = pkgs.writeText "packages.el" "(package! not-a-valid-package)";
      }
    ];
    doomPackageDir = pkgs.linkFarm "doom-config" [
      # straight needs a (possibly empty) `config.el` file to build
      { name = "config.el";   path = pkgs.emptyFile; }
      { name = "init.el";     path = ./doom-emacs/init.el; }
      { name = "packages.el"; path = ./doom-emacs/packages.el; }
    ];
  };
}
#+end_src

Lastly we run the emacs server on login:

#+name: users-emma-emacs-2
#+begin_src nix
{
  programs.doom-emacs.enable = true;
  services.emacs.enable = true;
}
#+end_src

Also we add some two convenience script for starting and debugging emacs

#+name: users-emma-emacs-3
#+begin_src nix
{
  home.file = {
    "bin/emacs" = applicationScript "emacsclient -cn $@";
    "bin/emacs-debug" = shellScript "emacs-28.1 -l /home/emma/etc-nixos/doom-emacs/config.el $@";
  };
}
#+end_src

*** Moving around
When moving around we want to move by visual lines instead of actual lines. I.e. if we have this

#+begin_quote

                    + -- Location of the cursor marked with <*>
                    v
1| Here's a normal <l>ine of text              |
2| Some really looooooooong text that won't f- | <--- Edge of the window
.| it in the window and is therefore wrapped.  |
3| Here's another not-so-long line of text     |
#+end_quote

And we press ~j~ we wan't the cursor to end up here:

#+begin_quote
1| Here's a normal line of text                  |
2| Some really loo<o>oooooong text that won't f- | <--- Edge of the window
.| it in the window and is therefore wrapped.    |
3| Here's another not-so-long line of text       |
#+end_quote

But by default we would move by "logical" lines and notes visual ones, ending up here:

#+begin_quote
1| Here's a normal line of text                |
2| Some really looooooooong text that won't f- | <--- Edge of the window
.| it in the window and is therefore wrapped.  |
3| Here's another <n>ot-so-long line of text   |
                   ^
                   + -- It _looks_ like we've moved down by two lines.
#+end_quote

The config for this looks like:

#+begin_src elisp :tangle ./doom-emacs/config.el
(add-hook 'org-mode-hook 'visual-line-mode)

(after! org
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-backward-char>") 'left-char)
  (define-key evil-motion-state-map (kbd "<remap> <evil-forward-char>") 'right-char)
  (define-key evil-normal-state-map (kbd "<remap> <evil-backward-char>") 'left-char)
  (define-key evil-motion-state-map (kbd "<remap> <evil-forward-char>") 'right-char)
)
#+end_src

**** TODO [#C] Remove wierd ~after! org~ and ~(add-hook 'org-mode-hook ...)~ call
Is it necesary? Was it added because the rebinds would get overriden otherwise? If so there should be a more suitable hook than ~org~ for this, it's kinda confusing.

**** TODO [#C] When moving multiple lines (ex. ~11j~); move by logical lines
When displaying relative line numbers they are displayed following logical lines, and when we're moving multipel lines at once the relative line numbers are what we're looking at, therefore moving multie lines should be interpreted as moving by logical lines
*** Relative line numbering
#+begin_src elisp tangle: ./doom-emacs/config.el
(setq display-line-numbers-type 'relative)
#+end_src

*** Insert emojis and unicode
:PROPERTIES:
:ID:       88c7c91a-e4d1-4130-8556-68418df4e65b
:END:
We enable emojify in ~init.el~ by adding the ~(emoji +unicode)~ snippet.

If we would like to render ascii or github-style emojis (like :smile) we'd add ~+ascii~ and ~+github~ respectively.

By default emojis are rendered as images, but our font has good unicode support so we'd like to display unicode glyphs as is:

#+begin_src elisp :tangle ./doom-emacs/config.el
(setq emojify-display-style 'unicode)
#+end_src

#+RESULTS:
: unicode

*** Custom unicode/emoji insertion
We use =emojify= (see [[*Insert emojis][Insert emojis]]) to insert emoji, we can also use this to easilly insert any kind of unicode characters we may want:

#+begin_src elisp :tangle ./doom-emacs/config.el
(setq emojify-user-emojis '(("—" . (("name" . "Em Dash")
                                    ("unicode" . "—")
                                    ("style" . "unicode")))
                            ("⇔" . (("name" . "\\iff")
                                    ("unicode" . "⇔")
                                    ("style" . "unicode")))
                            ("⇒" . (("name" . "\\implies")
                                    ("unicode" . "⇒")
                                    ("style" . "unicode")))
                            ("∀" . (("name" . "\\forall")
                                    ("unicode" . "∀")
                                    ("style" . "unicode")))
                            ("∃" . (("name" . "\\exists")
                                    ("unicode" . "∃")
                                    ("style" . "unicode")))
                            ("■" . (("name" . "\\qed")
                                    ("unicode" . "■")
                                    ("style" . "unicode")))
                            ("≅" . (("name" . "\\cong")
                                    ("unicode" . "≅")
                                    ("style" . "unicode")))
                            ("≤" . (("name" . "\\leq")
                                    ("unicode" . "≤")
                                    ("style" . "unicode")))
                            ))

;; If emojify is already loaded refresh emoji data
(when (featurep 'emojify)
  (emojify-set-emoji-data))
#+end_src
#+RESULTS:

See https://github.com/iqbalansari/emacs-emojify#custom-emojis for further reading.

*** Spell checking (Not active, wasn't configured successfully)
This hasn't been configured successfully, the broken config that might be useful for a future atempt looks like this:

~config.el~
#+begin_src elisp
(with-eval-after-load "ispell"
  ;; Configure 'LANG', otherwise 'ispell.el' cannot find a 'default
  ;; dictionary' even though multiple dictionaries will be configured
  ;; in next line.
  (setenv "LANG" "en_US.UTF-8")
  (setq ispell-program-name "hunspell")

  (setq ispell-dictionary "en_US,sv_SE")

  ;; 'ispell-set-spellchecker-params' has to be called
  ;; before 'ispell-hunspell-add-multi-dic' will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,sv_SE")

  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.hunspell_personal_dictionary"))

  ;; The personal dictionary file has to exist, otherwise hunspell will
  ;; silently not use it.
  (unless (file-exists-p ispell-personal-dictionary)
    (write-region "" nil ispell-personal-dictionary nil 0))
#+end_src

#+begin_src nix
{
  let
    hunspell = hunspellWithDicts ( with hunspellDicts; [ sv-se  en-us ] );
  in
  extraConfig = ''
    (setq exec-path (append exec-path '("${hunspell}/bin")))
  '';
}
#+end_src
*** General =org-mode=
**** TODO-Keywords
We define the following keywords:

#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROJ(p)" "WATCH(w)" "HOLD(h)" "BACKLOG(b)" "|" "DONE(d)" "KILL(k)")
          (sequence "MEET(m)" "|" "MEET_(_)")
          (sequence "MAYBE/SOMEDAY(s)" "|" "ABANDONED(a)"))))
#+end_src

With the following colors:

#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org
  (setq org-todo-keyword-faces
        '(("TODO" . "medium sea green")
          ("PROJ" . "dark cyan")
          ("WATCH" . "khaki")
          ("HOLD" . "coral")
          ("BACKLOG" . "yellow green")
          ("MEET" . "light sea green")
          ("MAYBE/SOMEDAY" . "pale goldenrod"))))
#+end_src

We can run  ~M-x list-colors-display~ to see a list of available color names.

**** Font faces

When making ~*bold*~, ~/italic/~, etc we don't want to show the actual markers:

#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org (setq org-hide-emphasis-markers t))
#+end_src

We wan't most of out non-code text to be /variable-pitch/ a.k.a. non-monospace. We enable variable-pitch:

#+begin_src elisp :tangle ./doom-emacs/config.el
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

Now we setup the font faces: (If you're in a org document and want to know the face a character; put you cursor over it and type ~SPC h '~, then go to the bottom of the buffer and look for a =face= entry.

#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org
  (custom-theme-set-faces 'user
                          '(org-level-1 ((t (:foreground "gray" :height 1.3 :weight bold))))
                          '(org-level-2 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-level-3 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-level-4 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-level-5 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-level-6 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-level-7 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-level-8 ((t (:foreground "gray" :height 1.075 :weight bold))))
                          '(org-block ((t (:inherit (shadow fixed-pitch)))))
                          '(org-code ((t (:inherit (shadow fixed-pitch)))))
                          '(org-document-info ((t (:foreground "dark orange"))))
                          '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
                          '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
                          '(org-link ((t (:foreground "royal blue" :underline t))))
                          '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
                          '(org-property-value ((t (:inherit fixed-pitch))) t)
                          '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
                          '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
                          '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
                          '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
                          '(line-number ((t (:inherit fixed-pitch :foreground "#3f444a"))))
                          '(line-number-current-line ((t (:inherit fixed-pitch :foreground "#bbc2cf"))))
                          ))
#+end_src

**** Which programs to use for opening org links

#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "firefox %s"))))
#+end_src

**** TODO Configure org link opening behaviour in the respective program section

For example opening web pages and pdf's with firefox should be configured in a firefox section.

*** Zettelkasten-method with =org-roam v2=.
We install this by manually adding the ~+roam2~ flag to the ~org~ module in ~init.el~.

**** roam graph with =graphviz=
org-roam uses /graphviz/ to generate a graph from all of the notes. We install the program and make sure that emacs can find the binary:

#+name: users-emma-emacs-zettelkasten
#+begin_src nix
{
  programs.doom-emacs.extraPackages = [ pkgs.graphviz ];
}
#+end_src

#+name: users-emma-emacs-extra-config-zettelkasten
#+begin_src elisp
(setq org-roam-graph-executable "${pkgs.graphviz.out}/bin/dot")
#+end_src

**** =org-roam-ui=
From https://github.com/org-roam/org-roam-ui#doom
#+begin_quote
Org-roam-ui tries to keep up with the latest features of org-roam, which conflicts with Doom Emacs's desire for stability. To make sure nothing breaks, use the latest version of org-roam by unpinning it.
#+end_quote

#+begin_src elisp :tangle ./doom-emacs/packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src elisp :tangle ./doom-emacs/config.el
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

**** Custom capture templates
Capture templates can be used when creating new nodes with org-roam. I've used [[https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/][this blogpost]] to guide me through the process.

***** Default template
#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org-roam
  (setq my-org-roam-capture-tempalte-default
        '("d" "default" plain
        "%?"
        :target (file+head "%<%y%m%d%h%m%s>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
#+end_src

***** Book note template
#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org-roam
  (setq my-org-roam-capture-template-book-note
        '("b" "book note" plain
        "\n*Child of:* [[id:33cdaa07-757a-491d-af0c-a25cbc9b7231][📚 Notes from reading books]]\n\n*Date read:*\n*ISBN:* \n*Source URI:* \n\n%?"
        :target (file+head "%<%y%m%d%h%m%s>-${slug}.org" "#+title: 📚 ${title}\n")
        :unnarrowed t)))
#+end_src

***** Setting the =org-roam-capture-templates= variable
#+begin_src elisp :tangle ./doom-emacs/config.el
(after! org-roam
  (setq org-roam-capture-templates
        (list my-org-roam-capture-tempalte-default
              my-org-roam-capture-template-book-note)))
#+end_src

*** Read pdf's and epub's with =pdftools=, =nov.el= and anotate them with =noter=
=noter= allows us to annotate our documents and =nov.el= displays epubs in emacs, these two go very well together!

We added ~+noter~ flag to the ~org~ module in ~doom-emacs/init.el~
[[https://github.com/weirdNox/org-noter][Documentation for noter]]

We add the ~pdf~ module in ~doom-emacs/init.el~ to get =pdftools=

We install =nov.el= via ~packages.el~:

#+begin_src elisp :tangle ./doom-emacs/packages.el
(package! nov)
#+end_src

=nov.el= uses ~unzip~ when reading epubs, let's make sure that's availible
[[https://depp.brause.cc/nov.el/][Documentation for nov.el]]

#+name: users-emma-emacs-nov-el
#+begin_src nix
{
  programs.doom-emacs.extraPackages = [ pkgs.unzip ];
}
#+end_src

#+name: users-emma-emacs-extra-config-nov-el
#+begin_src elisp
(setq nov-unzip-program "${pkgs.unzip.out}/bin/unzip")
#+end_src

Now we make sure to activate ~nov-mode~ on reading ~.epub~

#+begin_src elisp :tangle ./doom-emacs/config.el
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

*** Terminal emulator
We're using ~shell~ (see ~init.el~) for our terminal needs.

We bind ~C-c t~ to launching a new terminal with ~term_~.

The ~term_~ function is based off of ~term~ but with two changes:
1) In interactive mode we don't prompt for the shell program to run, we just run bash
2) Each ~term_~ invocation creates a new terminal buffer, the behaviour is ~term~ is to create a single buffer or switch to it if it exists.

#+begin_src elisp :tangle ./doom-emacs/config.el
(defvar nterms 0)

(defun term_ (program)
  "Modified version of ~term~"
  (interactive (list "/run/current-system/sw/bin/bash"))
  (setq nterms (+ 1 nterms))
  (let ((termname (concat "terminal-" (number-to-string nterms))))
      (set-buffer (make-term termname program))
      (term-mode)
      (term-char-mode)
      (switch-to-buffer (concat "*" termname "*"))))

(define-key (current-global-map) (kbd "C-c t") #'term_)
#+end_src

*** Python language server
We've added ~(python +lsp +pyright)~ to ~./doom-emacs/init.el~.

We also install pyright to the user environment

#+name: users-emma-emacs-python
#+begin_src nix
{
  home.packages = [ pkgs.nodePackages.pyright ];
}
#+end_src

**** TODO Can pyright be installed so that only emacs can see it? Only emacs uses it

** direnv
#+name: users-emma-direnv
#+begin_src nix
{
  home.packages = [ pkgs.direnv ];
}
#+end_src

We add a direnv hook to bash

#+name: users-emma-direnv-bashrc-extra
#+begin_src shell
eval "$(${pkgs.direnv}/bin/direnv hook bash)"
#+end_src

*** TODO Move emacs for direnv config here
** Misc programs specific to emma
*** firefox
#+name: users-emma-firefox
#+begin_src nix
(
let
  firefox = pkgs.firefox;
in
{
  home.packages = [ firefox ];
  home.file."bin/firefox" = applicationScript "${firefox}/bin/firefox $@";
}
)
#+end_src
*** Gimp
#+name: users-emma-gimp
#+begin_src nix
{
  home.packages = [ pkgs.gimp ];
}
#+end_src
*** Feh
#+name: users-emma-feh
#+begin_src nix
{
  home.packages = [ pkgs.feh ];
}
#+end_src

*** Tldr
Tealdr is a rust implementation of tldr
#+name: users-emma-tldr
#+begin_src nix
{
  home.packages = [ pkgs.tealdeer ];
}
#+end_src

*** zip and unzip
#+name: users-emma-zip-unzip
#+begin_src nix
{
  home.packages = [ pkgs.zip pkgs.unzip ];
}
#+end_src
*** spectre-cli
We use spectre-cli as a password manager

#+name: users-emma-spectre-cli
#+begin_src nix
{
  home.packages = [ pkgs.spectre-cli ];
  home.shellAliases = {
    spectre = ''SPECTRE_USERNAME="emmabastas" ${pkgs.spectre-cli}/bin/spectre -q'';
    spectre_ = ''${pkgs.spectre-cli}/bin/spectre -q'';
  };
}
#+end_src
*** customized vim
The system-installed vim is boring, let's add our own

#+name: users-emma-vim
#+begin_src nix
{
  home.packages = [ (pkgs.callPackage ./vim-cli.nix {}) ];
}
#+end_src
** Globally installed programming language
Some languages we find ourselves using quite a lot for simple scripting and we want to install them globally to save ourselves from a bunch of ~shell.nix~'s all over the place.

#+name: users-emma-global-pls
#+begin_src nix
{
  home.packages = [
    pkgs.ghc
    pkgs.haskell-language-server
  ];
}
#+end_src

In addition to this we add the ~python~ and ~haskell~ module to ~init.el~

** Flashcards setup
*** =org-drill=
We install org-drill via ~packages.el~:

#+begin_src elisp :tangle ./doom-emacs/packages.el
(package! org-drill)
#+end_src

In my workflow I tend to add flashcards in batches, this also means that flashcards to review will tend to comme in batches as well. To deal with this we add /noise/ to the scheduling, causing the review dates to /spread out/. This is a common technique and org-drill has a setting for enabling this feature:

#+begin_src elisp :tangle ./doom-emacs/config.el
(setq org-drill-add-random-noise-to-intervals-p t)
#+end_src

By default org-drill prompts us to save the file when done with the drill session. Saving is in my muscle-memory and I only find this anoying so let's dissable it:

#+begin_src elisp :tangle ./doom-emacs/config.el
(setq org-drill-save-buffers-after-drill-sessions-p nil)
#+end_src

I don't want the card headings to show as they ca reveal information.

#+begin_src elisp :tangle ./doom-emacs/config.el
(setq org-drill-hide-item-headings-p t)
#+end_src

*** =webwork-flashcard=
I've made a custom webserver for integrating webwork problems with my flashcard setup. Read more about it here: https://github.com/emmabastas/webwork-flashcard

#+name: users-emma-webwork-flashcard
#+begin_src nix
{
  home.packages = [ (pkgs.callPackage ./webwork-flashcard {}) ];
}
#+end_src
** Backups with mega.nz
/NOTE: All of the setup here is statefull, not done automatically by nix./

We use[[https://mega.nz/cmd][ mega-cmd]] to backup some files in the home directory.

install mega-cmd:

#+name: users-emma-mega-cmd
#+begin_src nix
{
  home.packages = [ pkgs.megacmd ];
}
#+end_src

Based off [[https://github.com/meganz/MEGAcmd/blob/master/contrib/docs/BACKUPS.md][this guide]]

First we need to login:
#+begin_src bash
mega-login <email> <password>
#+end_src

Create the backup directory on the cloud if it doesn't exists.
Then we sync ~~/org~ every day at 10:00 and keep 10 backups.

#+begin_src
# Create backup directory if it doesn't exists
mega-mkdir -p /backups/samsung_940x/daily/

mega-backup /home/emma/org/ /backups/samsung_940x/daily/ --period="0 0 10 * * *" --num-backups=10
#+end_src

* user ~foo~
An alternative account to use with our hacker persona /s

We want it to look a lot like the main ~emmabastas~ account

#+name: users-foo
#+begin_src nix :noweb yes
users.foo =
let
  shellScript = cmd: {
    text = ''
      #!/bin/sh
      ${cmd}
    '';
    executable = true;
  };

  applicationScript = cmd: shellScript ''
    (${cmd} &)
    kill $(expr $PPID - 1)
  '';
in
lib.mkMerge [
  nix-doom-emacs.hmModule
  ({ pkgs, ... }: utils.recursiveMerge [
    {
      home.stateVersion = <<state-version>>;
    }
    <<users-foo-spectre-cli>>
    <<users-foo-git>>
    <<users-foo-mullvad-browser>>
    <<users-emma-emacs-1>>
    <<users-emma-emacs-2>>
    <<users-emma-emacs-3>>
    <<users-emma-emacs-python>>
    <<users-emma-mullvad>>
    <<users-emma-tldr>>
    <<users-emma-zip-unzip>>
    <<users-emma-global-pls>>
    <<users-emma-vim>>
    <<users-emma-direnv>>
    <<users-emma-st>>
    <<users-emma-nerdfonts>>
    <<users-emma-ssh>>
    <<users-emma-bash>>
    <<users-emma-i3>>
    <<users-emma-nix-flakes>>
    {
      programs.doom-emacs = {
        extraConfig = ''
        '';
      };
    }
  ])
];
#+end_src

** bash
For our ~foo~ user we want to configure our bash shell in a non-declarative fashion for ease of use

#+name: users-foo-bash
#+begin_src nix
{
  programs.bash = {
    enable = true;
    bashrcExtra = ''
      export PATH=$HOME/bin:$PATH
      source $HOME/bashrc
      <<users-emma-direnv-bashrc-extra>>
    '';
  };
}
#+end_src

** Spectre
#+name: users-foo-spectre-cli
#+begin_src nix
{
  home.packages = [ pkgs.spectre-cli ];
}
#+end_src

** Git
#+name: users-foo-git
#+begin_src nix
{
  programs.git = {
    enable = true;
    extraConfig = {
      core.editor = "${(pkgs.callPackage ./vim-cli.nix {}).out}/bin/vim";
      init.defaultBranch = "main";
    };
    ignores = [ "*.swp" ];
  };
}
#+end_src

** Mullvad browser
#+name: users-foo-mullvad-browser
#+begin_src nix
{
  home.packages = [ pkgs.mullvad-browser ];
  home.file."bin/mullvad-browser" = applicationScript "${pkgs.mullvad-browser}/bin/mullvad-browser $@";
}
#+end_src

* Desktop environment

Use =i3= as the window manager:

#+name: system-wide-desktop-environment
#+begin_src nix
{
  services.xserver = {
    desktopManager.xterm.enable = false;

    displayManager = {
      defaultSession = "none+i3";
    };

    windowManager.i3 = {
      enable = true;
    };
  };
}
#+end_src

* Networking

We're using =wpa_supplican + NetworkManager=.

#+name: system-wide-networking-1
#+begin_src nix
{
  networking.networkmanager.enable = true;

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.enp3s0.useDHCP = true;
  networking.interfaces.wlp2s0.useDHCP = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;
}
#+end_src

We also want to use =NetworkManager= witout ~sudo~:

#+name: system-wide-networking-2
#+begin_src nix
{
  users.users.emma.extraGroups = [ "networkmanager" ];
}
#+end_src

**  Managing =NetworkManager= connections (delete connections, see passwords)

Connections are stored in [[/etc/NetworkManager/system-connections/]] (requires ~sudo~).

** VPN
#+name: system-wide-networking-vpn
#+begin_src nix
{
  services.mullvad-vpn.enable = true;
}
#+end_src

~mullvad~ is used to configure the VPN:

#+name: users-emma-mullvad
#+begin_src nix
{
  home.packages = [ pkgs.mullvad ];
}
#+end_src

* Localization/keymap/timezone

#+name: system-wide-localization
#+begin_src nix
{
  i18n.defaultLocale = "en_US.UTF-8";
  console.keyMap = "sv-latin1";
  services.xserver.layout = "se";
  time.timeZone = "Europe/Stockholm";
}
#+end_src

* Other packages
** Vim
#+name: system-wide-vim
#+begin_src nix
{
  environment.systemPackages = [ pkgs.vim ];
}
#+end_src

** Teamviewer

We sometimes want to use Teamviewer to help friends and family with IT. Teamviewer /feels/ like a major security issue though, so we leave it commented out here and only uncomment for those brief moments where we need it.

#+name: system-wide-teamviewer
#+begin_src nix
{
  #nixpkgs.config.allowUnfree = true;
  #services.teamviewer.enable = true;
}
#+end_src

We could proably find a better way to disable teamviewer by default, but this is 80/20.

** Mathematica
NO LONGER USING THIS PACKAGE

Mathematica is proprietary software, and the nix package requires ~Mathematica_13.0.1_BNDL_LINUX.sh~ to already be a part of the store.
The file can be downoaded by going to [[https://account.wolfram.com/products]] ~> User Portal~ and doing a =Drect File Download=.

Then add the downloaded file to the store with ~nix-store --add-fixed sha256 Mathematica_13.0.1_BNDL_LINUX.sh~.

Check if the file in in the store with ~ls /nix/store/ | grep Mathematica~.

After that we can install the nix package:

#+name: system-wide-mathematica
#+begin_src nix
{
  #nixpkgs.config.allowUnfree = true;
  #environment.systemPackages = [ pkgs.mathematica ];
}
#+end_src

* Machine specific configuration

I'm currently running my config on a single machine, so no need to split up this part of the config depending on machine yet.

#+name: system-wide-machine-specific
#+begin_src nix
{
  networking.hostName = "acomputer";
}
#+end_src

*** High-res screen

The TTY font is very small on a high-res screen, we use a large Terminus font to remedy this.
~earlySetup = true~ applies the bigger font earlier in the startup process.

#+name: system-wide-high-res-1
#+begin_src nix
{
  console = {
    earlySetup = true;
    font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
    packages = with pkgs; [ terminus_font ];
  };
}
#+end_src

These settings appear to produce as tear-free setup.
~dpi = 220~ is the most important setting here, it makes things scale better for a high-res screen.

#+name: system-wide-high-res-2
#+begin_src nix
{
  services.xserver = {
    videoDrivers = [ "modesetting" ];
    dpi = 220;
  };
}
#+end_src

If we where to experience graphics isses these settings could help, the perf would drop though.

#+begin_src nix
{
  services.xserver = {
    videoDrivers = [ "intel" ];
    deviceSection = ''
      Option "DRI" "2"
      Option "TearFree" "true"
    '';
  };
}
#+end_src

*** Screen brightness

Our machine has brightness function keys that aren't configured by default, so we do it manually.

We use =brightnessctl= to set brightness:

#+name: system-wide-brightnessctl
#+begin_src nix
{
  environment.systemPackages = [ pkgs.brightnessctl ];
}
#+end_src

**** TODO configure i3 in this section instead of in [[*User emma][User emma]]
#And then bind the brightness keys to it in =i3=:
#
##+begin_src conf :tangle i3.conf
#bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl s +10%
#bindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl s 10%-
##+end_src

*** Sound
#+name: system-wide-sound
#+begin_src nix
{
  sound.enable = true;
  hardware.pulseaudio.enable = true;
}
#+end_src

**** TODO configure i3 in this section instead of in [[*User emma][User emma]]
#Our machine has volume functions keys that aren't configured by default, so we do it manually.
#
##+begin_src conf :tangle i3.conf
#set $refresh_i3status killall -SIGUSR1 i3status
#bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
#bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
#bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
#bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
##+end_src

*** Touchpad
#+name: system-wide-touchpad
#+begin_src nix
{
  services.xserver.libinput.enable = true;
}
#+end_src

*** Boot
#+name: system-wide-boot
#+begin_src nix
{
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
}
#+end_src

*** Result of ~nixos-generate-config~.
We generated our config hardware config using ~nixos-generate-config --show-hardware-config~

It gave us this (except for minor manual changes made when updating nixos version):

#+name: hardware-config
#+begin_src nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/a4ef7ef0-7ea6-46e4-8a5f-ec9cf5fe8f24";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/BFEA-950B";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/04019ade-d0d4-40ff-a6f9-bf567ae3fce9"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # This option in deprecated in 23.05
  # high-resolution display
  #hardware.video.hidpi.enable = lib.mkDefault true;
}
#+end_src

* Misc
** Use X server:

#+name: system-wide-misc-x-server
#+begin_src nix
{
  services.xserver = {
    enable = true;
    autorun = true;
  };
}
#+end_src

** SSH

#+name: system-wide-misc-ssh
#+begin_src nix
{
  services.openssh.enable = true;
}
#+end_src

** State version
#+begin_quote
This value determines the NixOS release from which the default
settings for stateful data, like file locations and database versions
on your system were taken. It‘s perfectly fine and recommended to leave
this value at the release version of the first install of this system.
Before changing this value read the documentation for this option
(e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
#+end_quote

#+name: state-version
#+begin_src nix
"21.11"
#+end_src


* Global TODOS
** TODO [#B] Find a relliable way to override default doom settings for packages
** TODO [#B] Should =i3= be configured in nix instead of in a separate config file?
Relevant sections:
    - [[Screen brightness]]
    - [[Sound]]

** DONE [#A] Setup home folder syncing with Mega
** TODO [#C] Add tons of math-related unicode to emojify
** TODO [#C] ~C-*~ style shortcut for inserting emojis
** TODO [#C] Sometimes (only the first time?) when opening a hyperlink in emacs they are opened as two tabs in FF + one tab in Chrome.
    is ~org-file-apps~ the relevant variable?

** TODO [#C] Pomodoro timer in emacs
** TODO [#C] Move ~./doom-emacs/init.el~ into the literate config.
** PROJ [#C] Move all of the contents of [[file:emma/][./emma/]] into the literate config.
** DONE [#B] Configure doom-emacs so that everything doesn't have to be rebuilt everytime
See: https://github.com/nix-community/nix-doom-emacs/pull/303
